/*
 * /import/common/tables/jwks/tabular.js
 *
 * Used both by organization and client.
 */

import { Forms } from 'meteor/pwix:forms';

import { Jwks } from './index.js';

/**
 * @locus Anywhere
 * @returns {Array<fieldDefinition>}
 */
Jwks.recordFieldDef = function(){
    let columns = [
        // -- the JSON Web Key Set
        // several JWK can be in this set to let the organization/client manage their renewals
        {
            name: 'jwks',
            type: Array,
            optional: true
        },
        {
            name: 'jwks.$',
            type: Object
        },
        // key identifier (kid)
        {
            name: 'jwks.$.id',
            type: String
        },
        {
            name: 'jwks.$.label',
            type: String,
            optional: true,
            form_check: Jwks.checks.jwk_label,
            form_type: Forms.FieldType.C.OPTIONAL
        },
        // the usage chosen at creation
        {
            name: 'jwks.$.use',
            type: String,
            form_check: Jwks.checks.jwk_use,
            form_type: Forms.FieldType.C.MANDATORY
        },
        // the key type identifies the cryptographic algorithm family used with the key
        {
            name: 'jwks.$.kty',
            type: String,
            form_check: Jwks.checks.jwk_kty,
            form_type: Forms.FieldType.C.MANDATORY
        },
        // the specific cryptographic algorithm used with the key
        {
            name: 'jwks.$.alg',
            type: String,
            form_check: Jwks.checks.jwk_alg,
            form_type: Forms.FieldType.C.MANDATORY
        },
        // whether the algorithm is symmetric (have a secret) or not (have a private/public pair)
        //  automatically set when generating the secret / the keys pair
        {
            name: 'jwks.$.symmetric',
            type: Boolean
        },
        // an optional key id parameter
        {
            name: 'jwks.$.kid',
            type: String,
            optional: true,
            form_check: Jwks.checks.jwk_kid,
            form_type: Forms.FieldType.C.OPTIONAL
        },
        // an optional expiration date
        {
            name: 'jwks.$.expireAt',
            type: Date,
            optional: true,
            form_check: Jwks.checks.jwk_expireAt,
            form_type: Forms.FieldType.C.OPTIONAL
        },
        // the symmetric secret
        {
            name: 'jwks.$.secret',
            type: Object,
            optional: true
        },
        // the secret as the CryptoKey generated by Jose
        // because we do not have any CryptoKey.dump or jsonify primitive, we at least keep the returned algorithm object
        {
            name: 'jwks.$.secret.key',
            type: Object
        },
        {
            name: 'jwks.$.secret.key.algorithm',
            type: Object,
            blackbox: true
        },
        // the JWK export
        {
            name: 'jwks.$.secret.jwk',
            type: Object,
            blackbox: true
        },
        // The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used
        {
            name: 'jwks.$.secret.key_opes',
            type: Array,
            optional: true
        },
        {
            name: 'jwks.$.secret.key_opes.$',
            type: String
        },
        // the private/public key pair for an asymmetric algorithm
        {
            name: 'jwks.$.pair',
            type: Object,
            optional: true
        },
        // the  algorithm returned in the CryptoKey generated by Jose
        {
            name: 'jwks.$.pair.key',
            type: Object
        },
        {
            name: 'jwks.$.pair.key.algorithm',
            type: Object,
            blackbox: true
        },
        // the private part
        {
            name: 'jwks.$.pair.private',
            type: Object
        },
        // the private key JWK export
        {
            name: 'jwks.$.pair.private.jwk',
            type: Object,
            blackbox: true
        },
        // the private key PKCS8 export
        {
            name: 'jwks.$.pair.private.pkcs8',
            type: String
        },
        // The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used
        {
            name: 'jwks.$.pair.private.key_opes',
            type: Array,
            optional: true
        },
        {
            name: 'jwks.$.pair.private.key_opes.$',
            type: String
        },
        // the public part
        {
            name: 'jwks.$.pair.public',
            type: Object
        },
        // the public key JWK epxort
        {
            name: 'jwks.$.pair.public.jwk',
            type: Object,
            blackbox: true
        },
        // the public key SPKI export
        {
            name: 'jwks.$.pair.public.spki',
            type: String
        },
        // The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used
        {
            name: 'jwks.$.pair.public.key_opes',
            type: Array,
            optional: true
        },
        {
            name: 'jwks.$.pair.public.key_opes.$',
            type: String
        },
        // creation timestamp of this jwk
        {
            name: 'jwks.$.createdAt',
            type: Date
        },
        {
            name: 'jwks.$.createdBy',
            type: String
        }
    ];
    return columns;
};
